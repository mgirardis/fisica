<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
Author: Mauricio Girardi-Schappo, PhD.
Distributed under GNU License v3.0

27th of December, 2010
-->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>Positron Scattering</title>
<script type="text/javascript" language="javascript" src="positronScatteringData.js"></script>
<script type="text/javascript" language="javascript" src="drawingLib.js"></script>
<script type="text/javascript" language="javascript">

/*
 * Calculates a linear transformation
  between the "real world"
 * and the canvas world.
 * param @ cLrg int :: canvas width
 * param @ cAlt int :: canvas height
 * param @ mxi,myi real,real :: left-bottom coordinate of the real world
 * param @ mxf,myf real,real :: top-right coordinate of the real world
 */
function TransCoord(cLrg,cAlt,mxi,myi,mxf,myf) {
	this.Bx = cLrg/(mxf-mxi);
	this.Ax = - this.Bx * mxi;
	this.By = cAlt/(myi-myf);
	this.Ay = - this.By * myf;

	this.bot_left = [mxi, myi];
	this.top_right = [mxf, myf];
}
TransCoord.prototype.cx = function(mx) {
	return this.Ax + this.Bx * mx;
}
TransCoord.prototype.cy = function(my) {
	return this.Ay + this.By * my;
}
TransCoord.prototype.getWorldWidth = function() {
	return Math.abs(this.bot_left[0] - this.top_right[0]);
}
TransCoord.prototype.getWorldHeight = function() {
	return Math.abs(this.bot_left[1] - this.top_right[1]);
}
TransCoord.prototype.canvasDist = function(r) {
	return Math.abs(this.cx(0) - this.cx(r));
}

// generates a gaussian distribution with mean xMed and stdDeviation standard deviation
function gaussRand(xMed, stdDeviation) {
	var v1, v2, R;
	do {
		v1 = 2 * Math.random() - 1;
		v2 = 2 * Math.random() - 1;
		R = v1*v1 + v2*v2;
	} while ((R>=1)||(R==0));

	var tmp = Math.sqrt(-2*Math.log(R)/R);

	return xMed + stdDeviation * v2 * tmp;
}

/* All the parameters below are in the SI units
 *
 * Every "draw" function below belongs to the drawingLib.js
 * Every "color" function too
 */

// important global constants
	var bohrRadius = 5.29177E-11, eVToJoules = 1.60218E-19, sqrcmToSqrMeters = 1E-04, speedOfLight = 2.99792458E+8;

// the energy limits are set here 'cause the function evaluateData doesn't extrapolate the graphics...
var energySupLimit = 50, energyInfLimit = 0.5; // eV: mean positrons' initial energy, minimum data energy

// the total number of positrons to be generated and scattered
var totalPositrons = 5E+02;

// HTML text area used to write the output data, the first is for the elastic scattering
// the second is for the annihilation data
var outputCol, outputAnni, output;

// where the TransCoord object will be instatiated
var tc;

// canvas instantiates the canvas and stage is its context
var stage, canvas;

// the particle we are following
var positron;

/* Positron class
 * it should be initiated giving some energy
 * and some position on the space
 * Parameters:
 * energy :: float - positron energy
 * r :: float(3) - positron current position
 * rAnt :: float(3) - positron's position on the step i - 1
 * alive :: logical - if this is true, the positron still alive, if this is false, it annihilated
 * _color :: string - the path color
 */
function Positron() {
	var red, green, blue; // the colors for the positron;

	// private properties
	this.restEnergy = 5.10998903E+5; // rest energy of electron or positron in eV
	this.restMass = 9.10938188E-31; // Kg
	this.restMomentum = 2.73092398E-22; // Kg m / s

    // random initial energy and position
    this.randomEnergy(47, 2); // eV

	// random initial position
	this.r = new Array(3);
    this.r[0] = gaussRand(0, 2*bohrRadius); // m
	this.r[1] = gaussRand(0, 2*bohrRadius); // m
	this.r[2] = gaussRand(0, 2*bohrRadius); // m

	// setting the previous position as the actual position, 'cause we don't have yet a previous position
	// it is needed to draw the positron's path on the canvas
	// the following loop is necessary to set prevR not as a pointer of r, but as a new property of the class
	this.prevR = new Array(3);
	for (var j = 0; j < this.r.length; j++) this.prevR[j] = this.r[j];

	// setting the positron as alive
    this.alive = true;

	// setting the positron's path color
	// getting random numbers only between 0 and 200 'cause I don't want much light colors
	red = Math.random() * 200;
	green = Math.random() * 200;
	blue = Math.random() * 200;
	this._color = "#000"; //colorRgbToHex(red, green, blue);

	// drawing first position
	//drawPoint(this.r, this._color, 3);
}
Positron.prototype.randomEnergy = function(e, de) {
	do { this.energy = gaussRand(e, de); } while ((this.energy > energySupLimit) || (this.energy < energyInfLimit)); // eV
}
Positron.prototype.setTargetIndex = function() {
    // the following lines are commented cause I got only one kind of medium's particle
    //do { this.targetIndex = Math.floor(Math.random() * energy_xDat.length); } while (this.targetIndex == energy_xDat.length);
	this.targetIndex = 0;
}
Positron.prototype.calcRandomMFP = function() {
	var mfp, t, p;

	// density_Dat[] is global var
	mfp = 1 / (density_Dat[this.targetIndex] * this.getCSvalue(0)); // the index is 0 to get the TCS

    // getting random direction
    t = Math.random() * 2 * Math.PI;
    p = Math.random() * Math.PI;

	return { mod: mfp, theta: t, phi: p };
}
Positron.prototype.setNewPosition = function(mfp) {
	// setting previous position
	// the loop below is necessary, cause if we declare this.prevR = this.r,
	// the interpreter will treat the this.prevR as a pointer to this.r
	for (var j = 0; j < this.r.length; j++) this.prevR[j] = this.r[j];

	// setting current position
    this.r[0] += mfp.mod * Math.sin(mfp.phi) * Math.cos(mfp.theta);
    this.r[1] += mfp.mod * Math.sin(mfp.phi) * Math.sin(mfp.theta);
    this.r[2] += mfp.mod * Math.cos(mfp.phi);
}
Positron.prototype.getAbsPos = function() {
	return Math.sqrt(this.r[0]*this.r[0] + this.r[1]*this.r[1] + this.r[2]*this.r[2]);
}
Positron.prototype.move = function() {
	// set the kind of the medium's particle we want to interact
    this.setTargetIndex();

    // calculating new r position
	this.setNewPosition(this.calcRandomMFP());
}
Positron.prototype.getCSvalue = function(csIndex) {
    // the following content should be a cubic spline routine
    // but for the moment it is just linear
    // the result goes on square meters unit
    // and is multiplied by 10^-16, what is generally made on real data
	// energy_xDat[], crSect_yDat[] and sqrcmToSqrMeters are global vars
    return evaluateData(energy_xDat[this.targetIndex][csIndex], crSect_yDat[this.targetIndex][csIndex], this.energy) * sqrcmToSqrMeters * 1E-16;
}
Positron.prototype.getInteractionType = function() {
	var tcs, total, csPercent, rNum;

	//calculate total cross section
	tcs = this.getCSvalue(0);

    // check if the positron is out the sphere
    if (this.getAbsPos() >= sphereRadius) { // sphereRadius is global var
        return "out";
    }

	// calculating the percentual cross sections
	total = energy_xDat[this.targetIndex].length;
	csPercent = new Array(total);
	for (var j = 0; j < total; j++) {
		if (j == 0) { csPercent[0] = 1; continue; }//the first index is equal to "tcs/tcs", so it has to be 1
		csPercent[j] = this.getCSvalue(j)/tcs;
	}

	do { rNum = Math.random(); } while (rNum == 0); // getting some random value greater than zero

	/* csPercent indexes:
	 * 0 = tcs / tcs;
	 * 1 = aniquilação / tcs;
	 * 2 = formação PS / tcs;
	 * dúvidas olhar no arquivo de dados
	 *
	 * abaixo seleciona-se o tipo de interação baseado no percentual em relação à TCS.
	 * a quantidade de estruturas de seleção (if e else) depende de quantos tipos diferentes de iteração teremos,
	 * ou seja, da quantidade de índices correspondentes às seções de choque no arquivo de dados
	 *
	 * dúvida: tem como generalizar a estrutura abaixo? -> vamos pensar! :)
	 */
	if ((rNum > 0) && (rNum <= csPercent[1])) {
		// the random number is in (0,Pa], where Pa is the annihilation percentual
		// thus the positron annihilated directly inside the sphere
		return "in";
	} else if ((rNum > csPercent[1]) && (rNum <= (csPercent[1] + csPercent[2]))) {
		// the random number is in (Pa,Pp], where Pp is the Ps formation percentual
		// thus the positron formed positronium
		return "Ps";
	} else {
		// the random number is in (Pp,1], thus the positron elasticaly scattered from medium's particles
		return "elastic";
	}
}
Positron.prototype.interact = function() {
	var itType = this.getInteractionType();
	var rNum;

	if ((itType == "out") || (itType == "in") || (itType == "Ps")) {
		this.annihilate(itType);
	} else if (itType == "elastic") {
		rNum = 3 * (Math.random()+1);
		rNum = Math.abs(gaussRand(rNum, Math.sqrt(rNum)));
		this.energy = this.energy - rNum; // losing some random energy in a elastic collision

		// the condition below is necessary 'cause the function evaluateData doesn't extrapolate the graphic
		if (this.energy < energyInfLimit) {
			if (this.energy < 0) this.energy = 0;
			this.annihilate("outOfDataRange");
			printLnC("# out of energy data range: E = " + this.energy.toExponential(10) + " eV");
			return;
		}
	}

	// drawing the positron's path
	this.drawPath();

	// printing positron info
	this.printInfo();

	return;
}
Positron.prototype.getPosDifference = function() {
	return [this.r[0] - this.prevR[0], this.r[1] - this.prevR[1], this.r[2] - this.prevR[2]];
}
Positron.prototype.getAbsPosDifference = function() {
	var dif = this.getPosDifference();
	return Math.sqrt(dif[0]*dif[0] + dif[1]*dif[1] + dif[2]*dif[2]);
}
Positron.prototype.getMomentumDir = function() {
	var posDif = this.getPosDifference();
	var absPosDif = this.getAbsPosDifference();

	return [posDif[0]/absPosDif, posDif[1]/absPosDif, posDif[2]/absPosDif];
}
Positron.prototype.getMomentum = function() {
	var dir = this.getMomentumDir();
	var pAbs = Math.sqrt(2 * this.restMass * this.energy * eVToJoules);

	return [pAbs*dir[0], pAbs*dir[1], pAbs*dir[2]];
}
Positron.prototype.getRandDirection = function() {
	var dir = [Math.random(), Math.random(), Math.random()];
	var absDir = Math.sqrt(dir[0]*dir[0] + dir[1]*dir[1] + dir[2]*dir[2]);

	return [dir[0]/absDir, dir[1]/absDir, dir[2]/absDir];
}
Positron.prototype.annihilate = function(type) {
	/* This annihilation algorythm assumes that one photon is emitted randomly on the space,
	 * but the second photon should be emitted according to the momentum conservation.
	 * The energy, as consequence of changing from the CM frame to the lab frame, is doppler
	 * shifted. The calculations are based on the Humberston paper, with the difference that
	 * he assumes that the photons are emitted, on the CM frame, over the Y axis. Here, we
	 * calculate some random direction, w, in which the first photon should be emitted on the CM
	 * frame. The second photon, on the CM frame, should be emitted, then, over -w direction.
	 * Assuming that we have some initial momentum from the incident positron, the two photon's momenta
	 * are deflected in such a way that p1 + p2, the sum of the momenta on the lab frame, is equal
	 * to the initial CM momentum. The energy shift is then calculated with the difference between
	 * the projection of the photons' momenta over the w direction and the momenta of the photons
	 * on the CM frame, pInit.
	 */

	var pInit, w, p1, p2, p1w, p2w, ener1, ener2, pInitDotW;

	// calculating initial momentum on the CM frame
	pInit = this.getMomentum();

	// calculating random direction of the photons on the CM frame
	w = this.getRandDirection();

	// scalar product of pInit with w divided by 2
	pInitDotW = scalarProduct(pInit,w)/2;

	// calculating the projection of p1 and p2 on the w direction
	p1w = pInitDotW + this.restMomentum;
	p2w = pInitDotW - this.restMomentum;

	// energy of photons on the lab frame
	ener1 = Math.abs(speedOfLight * p1w / eVToJoules);
	ener2 = Math.abs(speedOfLight * p2w / eVToJoules);

	// calculating the momenta of two photons
	p1 = [pInit[0]/2 + this.restMomentum*w[0], pInit[1]/2 + this.restMomentum*w[1], pInit[2]/2 + this.restMomentum*w[2]];
	p2 = [pInit[0]/2 - this.restMomentum*w[0], pInit[1]/2 - this.restMomentum*w[1], pInit[2]/2 - this.restMomentum*w[2]];
	
	this.drawPhotons(p1, p2);

	printLnA("### annihilation " + type);
	printLnA(ener1.toExponential(10) + "    " + ener2.toExponential(10) + "    " + this.getAbsPos().toExponential(10) + "    " + this.r[0].toExponential(10) + "    " + this.r[1].toExponential(10) + "    " + this.r[2].toExponential(10));

	this.alive = false;
}
Positron.prototype.printInfo = function() {
	var str, separator = "    ";

	str = "";
	str += this.r[0].toExponential(10) + separator;
	str += this.r[1].toExponential(10) + separator;
	str += this.r[2].toExponential(10) + separator;
	str += this.energy.toExponential(10);
	/*for (var i = 0; i < total; i++) {
		str += info[i].toExponential(10) + separator;
	}*/

	printLnC(str);
	return;
}
/* the following methos are for drawing the informations on the canvas
 */
Positron.prototype.drawPhotons = function(phot1, phot2) {
	var phot1Abs, phot2Abs, p1, p2;

	phot1Abs = Math.sqrt(phot1[0]*phot1[0] + phot1[1]*phot1[1] + phot1[2]*phot1[2])/.5E-6;
	phot2Abs = Math.sqrt(phot2[0]*phot2[0] + phot2[1]*phot2[1] + phot2[2]*phot2[2])/.5E-6;

	p1 = [phot1[0]/phot1Abs + this.r[0], phot1[1]/phot1Abs + this.r[1], phot1[2]/phot1Abs + this.r[2]];
	p2 = [phot2[0]/phot2Abs + this.r[0], phot2[1]/phot2Abs + this.r[1], phot2[2]/phot2Abs + this.r[2]];

	drawLine(this.r, p1, "#00F", 1);
	drawLine(this.r, p2, "#00F", 1);
}
Positron.prototype.drawPath = function() {
	// draws the line between the points
	drawLine(this.prevR, this.r, this._color, 1);

	// draws the point in the positron's current place
	drawPoint(this.r, this._color, 2);
}

// draws the mean positrons' path
function drawMeanPath(p, _radius) {
	drawCircle(p, "#F00", _radius);
}

// prints a line on the output
function printLnA(str) {
	outputAnni.value += str + "\r\n";
}
function printLnC(str) {
	outputCol.value += str + "\r\n";
}
function printLn(str) {
	output.value += str + "\r\n";
}
function clearOutput() {
	outputCol.value = "";
	outputAnni.value = "";
	output.value = "";
}

// calculates the scalar product between two given vectors of same dimension
function scalarProduct(u, v) {
	var tot = u.length;
	var sum = 0;
	for (var k = 0; k < tot; k++) {
		sum += u[k]*v[k];
	}
	return sum;
}

// adjusts a linear spline
// and evaluate y on the given x0
function evaluateData(x, y, x0) {
    var y0; // the spline value at x0
    var k; // on the loop it is j + 1
    var angCoef, linCoef; // the spline coef
    var total = x.length - 1;
    for (var j = 0; j < total; j++) {
        k = j + 1;
        if ((x0 > x[j]) && (x0 < x[k])) {
            angCoef = (y[k] - y[j]) / (x[k] - x[j]);
            linCoef = y[j] - angCoef*x[j];
            y0 = angCoef * x0 + linCoef;
            break;
        } else {
            if (x0 == x[j]) {
                y0 = y[j];
                break;
            } else if (x0 == x[k]) {
                y0 = y[k];
                break;
            }
        }
    }
    return y0;
}

// resets the program
function programReset() {
	// instatiating and
	// cleaning the output textarea
    outputCol = document.getElementById("outputC");
	outputAnni = document.getElementById("outputA");
	output = document.getElementById("output");
	clearOutput();

	// instantiating the
	// canvas and the stage
	// and cleaning it
	canvas = document.getElementById("cnv");
	stage = canvas.getContext("2d");
	stage.clearRect(0, 0, canvas.width, canvas.height);

	// instantiating the TransCoord object
	// bottom-left point: (-1,-1)
	var bt_lf = -1E-5;
	// top-right point: (1,1)
	var tp_rt = 1E-5;
	tc = new TransCoord(canvas.width, canvas.height, bt_lf, bt_lf, tp_rt, tp_rt);

	// drawing some axes
	drawAxes(bt_lf, tp_rt, "#CCC", 1);
}

// begin of main program

window.onload = function() {
	// reseting the program
	programReset();

	printLnC("### Data for elastic scattering");
	printLnC("#      x (m)             y (m)              z (m)              E (eV)\r\n");

	printLnA("### Data for annihilation process");
	printLnA("#     E1 (eV)          E2 (eV)           r (m)           x (m)           y (m)           z (m)\r\n");

	printLn("### General data for the scattering process");
	printLn("");

	var meanPath = 0;
	var energyLoss = 0;
	var energyTemp;
    for (var i = 0; i < totalPositrons; i++) {
        positron = new Positron();
		energyTemp = positron.energy;

		printLnC("### positron " + i);
		positron.printInfo();

        while (positron.alive) {
			// moving the positron according to its cross section
            positron.move();
			// interacts with a random medium's particle and
			// when annihilating, draws photons (this last feature must be implemented - not anymore!)
			positron.interact();
        }
		printLnC("###\r\n");
		printLnA("###\r\n");

		meanPath += positron.getAbsPos();
		energyLoss += Math.abs(energyTemp - positron.energy);
    }
	meanPath = meanPath/totalPositrons;

	drawMeanPath([0,0], meanPath);

	printLn("### Total mean path of the positrons (m)");
	printLn(meanPath.toExponential(10));
	printLn("");
	printLn("### Total energy loss from scattering (eV)")
	printLn(energyLoss.toExponential(10));

	positron = null;
}

//end of main program

</script>
</head>

<body>
<canvas id="cnv" width="600" height="600" style="border: 1px solid #000;"></canvas>
<textarea id="output" name="output" cols="120" rows="3" wrap="physical"></textarea>
<textarea id="outputC" name="outputC" cols="120" rows="15" wrap="physical"></textarea>
<textarea id="outputA" name="outputA" cols="120" rows="15" wrap="physical"></textarea>
</body>
</html>
